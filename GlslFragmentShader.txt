取一个glsl举个例子
//https://zhuanlan.zhihu.com/p/400021421
//opengl 多光源Shader，整个shader就是计算每个光源的光，然后求和。

//layout (location = 1) in vec3 aColor; //输入的例子
// VAO中一个顶点的属性按序排列，然后按顶点排列
//每个属性值在不同的位置，color的属性位置值为1，这个1是我们在主程序中给它给的，glVertexAttribPointer函数第一个参数
//VAO指针跳给定大小，取第1个顶点，第2个顶点，第3个顶点的属性值
//out vec3 ourColor; // 向片段着色器输出一个颜色


#version 430 core//opengl版本4.3
out vec4 FragColor;//输出

struct Material {//材质
    sampler2D texture_diffuse1;//漫反射，散射光矢量
    sampler2D texture_specular1;//高亮反射矢量
    float shininess;//反射锐度
};

struct DirLight {//定向光
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    //最终环境光，漫反射，镜面光会加在一起变成显示的颜色
    //漫反射着色 镜面光着色 三个求和合并结果
};

struct PointLight {//点光源
    vec3 position;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    // 漫反射着色 镜面光着色 衰减（距离的二阶函数倒数） 合并结果
};

struct SpotLight {//聚光
    vec3 position;
    vec3 direction;
    float innercutoff;
    float outercutoff;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

#define MAX_DIR_LIGHTS 1
#define MAX_POINT_LIGHTS 128
#define MAX_SPOT_LIGHTS 128

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform Material material;

uniform vec3 viewPos;

uniform int dirlightnr;
uniform int pointlightnr;
uniform int spotlightnr;
uniform DirLight dirlights[MAX_DIR_LIGHTS];
uniform PointLight pointlights[MAX_POINT_LIGHTS];
uniform SpotLight spotlights[MAX_SPOT_LIGHTS];

uniform vec3 selColor;

// 函数声明
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

//三种光源得到的光照求和贡献给颜色
void main()
{
    // properties
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

    vec3 result = vec3(0.0);
    // phase 1: directional lighting
    for (int i = 0; i < dirlightnr; i++)
        result += CalcDirLight(dirlights[i], norm, viewDir);
    // phase 2: point lights
    for (int i = 0; i < pointlightnr; i++)
        result += CalcPointLight(pointlights[i], norm, FragPos, viewDir);
    // phase 3: spot light
    for (int i = 0; i < spotlightnr; i++)
        result += CalcSpotLight(spotlights[i], norm, FragPos, viewDir);

    if (selColor != vec3(0.0))
        result += selColor;

    FragColor = vec4(result, 1.0);
}

// 直线日光（平行光）
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // combine results
    vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords).x);
    return (ambient + diffuse + specular);
}

// 灯泡点光源
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
    // combine results
    vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords).x);
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}

// 带灯罩的点光源
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.innercutoff - light.outercutoff;
    float intensity = clamp((theta - light.outercutoff) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords).x);
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}
